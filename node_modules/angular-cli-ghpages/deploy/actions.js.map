{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../deploy/actions.ts"],"names":[],"mappings":";;;;;;;;;;AAKA,SAA8B,MAAM,CAClC,MAA2F,EAC3F,OAAuB,EACvB,WAAmB,EACnB,OAAe;;QAGf,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAC1C;aAAM;YAEL,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACnB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;aACpD;YAED,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAA;YAClF,MAAM,SAAS,qBACV,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAC,CAAC,CACtD,CAAC;YAEF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAiB,OAAO,CAAC,MAAM,CAAC,OAAQ,sBAAuB,aAAc,KAAM,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAoB,GAAG,OAAO,CAAC,QAAQ,GAAG,GAAG,CAAC,CAAC,CAAC,EAAG,EAAE,CAAC,CAAC;YAEjL,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,cAAc,CAAC;gBACzC,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO;gBAC/B,aAAa;aACd,EAAE,SAA4B,CAAC,CAAC;YACjC,MAAM,KAAK,CAAC,MAAM,CAAC;SACpB;QAED,MAAM,MAAM,CAAC,GAAG,CACd,WAAW,EACX,OAAO,EACP,OAAO,CAAC,MAAsC,CAC/C,CAAC;IACJ,CAAC;CAAA;AAnCD,yBAmCC","sourcesContent":["import { BuilderContext } from '@angular-devkit/architect';\nimport { Schema } from './schema';\nimport { json, logging } from '@angular-devkit/core';\n\n\nexport default async function deploy(\n  engine: { run: (dir: string, options: Schema, logger: logging.LoggerApi) => Promise<void> },\n  context: BuilderContext,\n  projectRoot: string,\n  options: Schema\n) {\n\n  if (options.noBuild) {\n    context.logger.info(`ðŸ“¦ Skipping build`);\n  } else {\n\n    if (!context.target) {\n      throw new Error('Cannot execute the build target');\n    }\n\n    const configuration = options.configuration ? options.configuration : 'production'\n    const overrides = {\n      ...(options.baseHref && {baseHref: options.baseHref})\n    };\n\n    context.logger.info(`ðŸ“¦ Building \"${ context.target.project }\". Configuration: \"${ configuration }\".${ options.baseHref ? ' Your base-href: \"' + options.baseHref + '\"' : '' }`);\n\n    const build = await context.scheduleTarget({\n      target: 'build',\n      project: context.target.project,\n      configuration\n    }, overrides as json.JsonObject);\n    await build.result;\n  }\n\n  await engine.run(\n    projectRoot,\n    options,\n    context.logger as unknown as logging.LoggerApi\n  );\n}\n"]}